/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.reshopper.dfp;



import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;


import android.app.Activity;
import android.view.ViewGroup;
import android.os.Bundle;
import android.location.Location;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import java.util.Map;
import java.util.HashMap;

import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.doubleclick.PublisherAdRequest;
import com.google.android.gms.ads.AdSize;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.doubleclick.PublisherAdView;
import com.google.android.gms.ads.doubleclick.AppEventListener;
//JONAS: Removed May 2020, as I recall we did not want FACEBOOK mediation any longer
//import com.google.android.gms.ads.mediation.admob.AdMobExtras;


// This proxy can be created by calling ComReshopperDfp.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=ComReshopperDfpModule.class)
public class DfpViewProxy extends TiViewProxy
{
    // Standard Debugging variables
    private static final String LCAT = "[com.reshopper.dfp] proxy";
    private static final boolean DBG = TiConfig.LOGD;
    private DfpView dfpView;


    // Constructor
    public DfpViewProxy()
    {
        super();
    }


    @Override
    public TiUIView createView(Activity activity) {
        dfpView = new DfpView(this);
		return dfpView;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options)
    {
        super.handleCreationDict(options);
        //Log.d(LCAT, "handleCreationDict");
    }

    @Kroll.method
    public void destroyAd()
    {
        Log.d("DfpViewProxy", "destroyAd called");
        if(dfpView != null){
            dfpView.destroy();
        }
    }

    @Override
    public void onDestroy(Activity activity) {
        if(dfpView != null){
            dfpView.destroy();
        }
    }

    @Override
    public void onPause(Activity activity) {
        if(dfpView != null){
            dfpView.pause();
        }
    }

    @Override
    public void onResume(Activity activity) {
        if(dfpView != null){
            dfpView.resume();
        }
    }

    @Override
	public void release()
	{
		Log.d("DfpViewProxy", "release view called");
		super.release();
	}

    @Override
    public void clearView(){
        Log.d("DfpViewProxy", "clearView called");
        super.clearView();
    }

    @Override
    public void releaseViews(){
        Log.d("DfpViewProxy", "releaseViews called");
        super.releaseViews();
    }


    private class DfpView extends TiUIView implements AppEventListener
    {
        // Standard Debugging variables
        private static final String LCAT = "[com.reshopper.dfp] view";
        //private static final boole an DBG = TiConfig.LOGD;

        private RelativeLayout layout;
        private PublisherAdView adView;
        AdSize customAdSize;
        int prop_top;
        int prop_left;
        int prop_right;
        String prop_color_bg;
        String prop_color_bg_top;
        String prop_color_border;
        String prop_color_text;
        String prop_color_link;
        String prop_color_url;


        public DfpView(final TiViewProxy proxy) {
            super(proxy);
            //Log.d(LCAT, "DfpView");

             /*LayoutArrangement arrangement = LayoutArrangement.DEFAULT;

             if (proxy.hasProperty(TiC.PROPERTY_LAYOUT)) {
             String layoutProperty = TiConvert.toString(proxy.getProperty(TiC.PROPERTY_LAYOUT));
             if (layoutProperty.equals(TiC.LAYOUT_HORIZONTAL)) {
             arrangement = LayoutArrangement.HORIZONTAL;
             } else if (layoutProperty.equals(TiC.LAYOUT_VERTICAL)) {
             arrangement = LayoutArrangement.VERTICAL;
             }
             }*/

            layout = new RelativeLayout(proxy.getActivity());
            setNativeView(layout);
            //setNativeView(new TiCompositeLayout(proxy.getActivity(), arrangement));

        }

        @Override
        public void onAppEvent(String name, String info) {
            Log.d (LCAT, "onAppEvent"+" "+name+", "+info);
            HashMap<String, String> map = new HashMap<String, String>();
            map.put(name, info);
            proxy.fireEvent("appEvent", map);
        }

        private void createAd() {

            try
            {
                //Log.d (LCAT, "createAd()");
                // create the adView
                adView = new PublisherAdView(proxy.getActivity());
                adView.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);

                if(ComReshopperDfpModule.AD_SIZES != null)
                {
                    if(ComReshopperDfpModule.AD_SIZES.length == 1){

                        if ( (ComReshopperDfpModule.AD_SIZES[0].getWidth() > 0) && (ComReshopperDfpModule.AD_SIZES[0].getHeight() > 0))
                        {
                            Log.d (LCAT, "createAd() Ad Unit: " + ComReshopperDfpModule.ADUNIT_ID
                                   + ", size: " + ComReshopperDfpModule.ADWIDTH
                                   + "x" + ComReshopperDfpModule.ADHEIGHT);

                            adView.setAdSizes(ComReshopperDfpModule.AD_SIZES[0]);
                        }
                        else
                        {
                            Log.d (LCAT, "createAd() Ad Unit: " + ComReshopperDfpModule.ADUNIT_ID + ", size: SMART_BANNER");
                            adView.setAdSizes(AdSize.SMART_BANNER);

                        }
                    }
                    else{
                        Log.d (LCAT, "createAd() Ad Unit: " + ComReshopperDfpModule.ADUNIT_ID + ", size: multiple");
                        adView.setAdSizes(ComReshopperDfpModule.AD_SIZES);
                    }
                }
                else{
                    Log.d (LCAT, "ADSIZES IS NOT DEFINED");
                    return;
                }


                adView.setAdUnitId(ComReshopperDfpModule.ADUNIT_ID);

                adView.setAppEventListener(this);

                // set the listener
                adView.setAdListener(new AdListener() {
                    public void onAdLoaded() {
                        if(proxy != null && adView != null){
                            HashMap<String, Integer> map = new HashMap<String, Integer>();
                            map.put("width", new Integer(adView.getWidth()));
                            map.put("height", new Integer(adView.getHeight()));

                            Log.d (LCAT, "onAdLoaded() " + adView.getWidth() + ", " + adView.getHeight());
                            proxy.fireEvent("didReceiveAd", new KrollDict(map));
                        }
                    }


                    public void onAppEvent(String name, String info) {
                        HashMap<String, Integer> map = new HashMap<String, Integer>();
                            map.put("nam", new Integer(adView.getWidth()));
                            map.put("height", new Integer(adView.getHeight()));

                            Log.d (LCAT, "onAdLoaded() " + adView.getWidth() + ", " + adView.getHeight());
                            proxy.fireEvent("didReceiveAd", new KrollDict(map));
                    }

                    public void onAdFailedToLoad(int errorCode) {
                        if(proxy != null && adView != null){
                            Log.d (LCAT, "onAdFailedToLoad(): " + errorCode);
                            proxy.fireEvent("didFailToReceiveAd", new KrollDict());
                        }
                    }

                    public void onAdOpened () {
                        if(proxy != null && adView != null){
                            Log.d (LCAT, "onAdOpened()");
                            proxy.fireEvent("ad_opened", new KrollDict());
                        }
                    }

                    public void onAdClosed () {
                        if(proxy != null && adView != null){
                            Log.d (LCAT, "onAdClosed()");
                            proxy.fireEvent("ad_closed", new KrollDict());
                        }
                    }

                    public void onAdLeftApplicadtion () {
                        if(proxy != null && adView != null){
                            Log.d (LCAT, "onAdLeftApplicadtion()");
                            proxy.fireEvent("leave_application", new KrollDict());
                        }
                    }
                });
                adView.setPadding(prop_left, prop_top, prop_right, 0);
                // Add the AdView to your view hierarchy.
                // The view will have no size until the ad is loaded.
                //setNativeView(adView);
                this.layout.addView(adView);
                loadAd();
            }
            catch (IllegalStateException e)
            {
                Log.w (LCAT, "EXCEPTION (IllegalStateException): ");
            }
            catch (Exception e)
            {
                Log.w (LCAT, "DFP EXCEPTION");
            }
        }


        // load the DFP ad
        public void loadAd()
        {
            //Log.d (LCAT, "loadAd");
            proxy.getActivity().runOnUiThread(new Runnable() {
                public void run() {
                    final PublisherAdRequest.Builder adRequestBuilder = new PublisherAdRequest.Builder();

                    if (ComReshopperDfpModule.LOCATION != null)
                    {
                        adRequestBuilder.setLocation (ComReshopperDfpModule.LOCATION);
                    }


                    if(ComReshopperDfpModule.CONTENT_URL != null)
                    {
                        adRequestBuilder.setContentUrl(ComReshopperDfpModule.CONTENT_URL);
                    }

                    //Log.d (LCAT, "requestAd ()");
                    // if (ComReshopperDfpModule.TEST_DEVICES != null)
                    // {
                    //     for (String s: ComReshopperDfpModule.TEST_DEVICES)
                    //     {
                    //         if (s == ComReshopperDfpModule.EMULATOR_ID)
                    //         {
                    //             adRequestBuilder.addTestDevice (PublisherAdRequest.DEVICE_ID_EMULATOR);
                    //         }
                    //         else
                    //         {
                    //             adRequestBuilder.addTestDevice (s);
                    //         }
                    //     }
                    // }

                    Bundle bundle = createAdRequestProperties();
                    if (bundle.size() > 0) {
                        Log.d (LCAT, "extras.size() > 0 -- set ad properties");
                        //JONAS: Removed May 2020, as I recall we did not want FACEBOOK mediation any longer
                        //adRequestBuilder.addNetworkExtras(new AdMobExtras(bundle));
                    }

                    adView.loadAd(adRequestBuilder.build());
                }
            });
        }




        @Override
        public void processProperties(KrollDict d) {
            super.processProperties(d);
            Log.d (LCAT, "process properties");
            try {

                Log.d (LCAT, "process properties");
                if (d.containsKey("adUnitId")) {
                    //Log.d (LCAT, "has adUnitId: " + d.getString("adUnitId"));
                    ComReshopperDfpModule.ADUNIT_ID = d.getString("adUnitId");
                }
                if (d.containsKey("adHeight")) {
                    //Log.d (LCAT, "has adHeight: " + d.getInt("adHeight"));
                    ComReshopperDfpModule.ADHEIGHT = d.getInt("adHeight");
                }
                if (d.containsKey("adWidth")) {
                    //Log.d (LCAT, "has adWidth: " + d.getInt("adWidth"));
                    ComReshopperDfpModule.ADWIDTH = d.getInt("adWidth");
                }
                if (d.containsKey("testDevices")) {
                    //Log.d (LCAT, "has test devices");
                    ComReshopperDfpModule.TEST_DEVICES = d.getStringArray("testDevices");
                }
                if (d.containsKey("suppressScroll")) {
                    //Log.d (LCAT, "has suppressScroll param: " + d.getBoolean("suppressScroll"));
                    ComReshopperDfpModule.SUPPRESS_SCROLL = d.getBoolean("suppressScroll");
                }
                if (d.containsKey("customTargeting")) {
                    KrollDict ct = d.getKrollDict("customTargeting");
                    Bundle b = new Bundle ();
                    Log.d (LCAT, "has " + ct.size () + " items in customTargeting dictionary:");
                    for (Map.Entry<String, Object> entry : ct.entrySet()) {
                        Object value = entry.getValue();
                        if (value != null) {
                            Log.d  (LCAT, " - " + entry.getKey() + " => " + value);
                            b.putString (entry.getKey(), value.toString());
                        }
                    }
                    ComReshopperDfpModule.CUSTOM_TARGETING = b;
                }

                if (d.containsKey("location")) {
                    KrollDict ld = d.getKrollDict("location");

                    if (!ld.isNull("latitude") && !ld.isNull("longitude") && !ld.isNull("accuracy")) {

                        Location l = new Location ("");
                        l.setLatitude(ld.getDouble ("latitude"));
                        l.setLongitude(ld.getDouble ("longitude"));
                        l.setAccuracy(ld.getDouble ("accuracy").floatValue ());

                        // Log.d (LCAT, "has location:");
                        // Log.d (LCAT, "  - latitude:  " + ld.getDouble ("latitude").toString ());
                        // Log.d (LCAT, "  - longitude: " + ld.getDouble ("longitude").toString ());
                        // Log.d (LCAT, "  - accuracy:  " + ld.getDouble ("accuracy").toString ());
                        ComReshopperDfpModule.LOCATION = l;
                    }
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_BG)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_BG: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BG));
                    prop_color_bg = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BG));
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_BG_TOP)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_BG_TOP: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BG_TOP));
                    prop_color_bg_top = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BG_TOP));
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_BORDER)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_BORDER: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BORDER));
                    prop_color_border = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_BORDER));
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_TEXT)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_TEXT: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_TEXT));
                    prop_color_text = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_TEXT));
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_LINK)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_LINK: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_LINK));
                    prop_color_link = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_LINK));
                }
                if (d.containsKey(ComReshopperDfpModule.PROPERTY_COLOR_URL)) {
                    //Log.d (LCAT, "has PROPERTY_COLOR_URL: " + d.getString(ComReshopperDfpModule.PROPERTY_COLOR_URL));
                    prop_color_url = convertColorProp(d.getString(ComReshopperDfpModule.PROPERTY_COLOR_URL));
                }

                if (d.containsKey("adSizes")) {
                    Log.d (LCAT, "has adSizes:");

                    Object[] adSizes = (Object[]) d.get("adSizes");

                    ComReshopperDfpModule.AD_SIZES = new AdSize[adSizes.length];

                    for (int i = 0; i < adSizes.length; i++) {
                        @SuppressWarnings("unchecked")
                        Map<String,Integer> hm = (Map<String,Integer>) adSizes[i];

                        // You now have a HashMap!
                        //Log.d (LCAT, "" + hm);

                        ComReshopperDfpModule.AD_SIZES[i] = new AdSize(hm.get("width"), hm.get("height"));
                    }
                }

                if (d.containsKey("contentURL")) {
                    //Log.d (LCAT, "has contentURL: "+d.getString("contentURL"));
                    ComReshopperDfpModule.CONTENT_URL = d.getString("contentURL");

                }

                // now create the adView
                this.createAd();
            }
            catch (Exception e) {
                //JONAS: MAY 2020. Disable exception logging, to avoid performance issues
                //Log.w (LCAT, "EXCEPTION: " + e.getMessage ());
            }
        }

        /*

        @Override
        public void processProperties(KrollDict props)
        {
            super.processProperties(props);
            requestAdOnUIThread();
        }

        // UI Thread Management

        public void requestAdOnUIThread() {
            if (!TiApplication.isUIThread()) {
                TiMessenger.postOnMain(new Runnable() {
                    public void run() {
                        __requestAd();
                    }
                });
            } else {
                __requestAd();
            }
        }


        */

        public void pause() {
            Log.d (LCAT, "pause");
            adView.pause();
        }

        public void resume() {
            Log.d (LCAT, "resume");
            adView.resume();
        }

        public void destroy() {
            Log.d (LCAT, "destroy");
            if(adView != null)
            {
                adView.destroy();
            }
        }

        // pass the method the TESTING flag
        public void requestAd() {
            Log.d (LCAT, "requestAd()");
            loadAd();
        }

        // helper methods



        // create the adRequest extra props
        // http://code.google.com/mobile/ads/docs/bestpractices.html#adcolors
        private Bundle createAdRequestProperties() {
            Bundle bundle = new Bundle();

            if (prop_color_bg != null)
            {
                bundle.putString("color_bg", prop_color_bg);
            }
            if (prop_color_bg_top != null)
            {
                bundle.putString("color_bg_top", prop_color_bg_top);
            }
            if (prop_color_border != null)
            {
                bundle.putString("color_border", prop_color_border);
            }
            if (prop_color_text != null)
            {
                bundle.putString("color_text", prop_color_text);
            }
            if (prop_color_link != null)
            {
                bundle.putString("color_link", prop_color_link);
            }
            if (prop_color_url != null)
            {
                bundle.putString("color_url", prop_color_url);
            }

            if (ComReshopperDfpModule.CUSTOM_TARGETING != null)
            {
                for (String key : ComReshopperDfpModule.CUSTOM_TARGETING.keySet())
                {
                    bundle.putString (key, ComReshopperDfpModule.CUSTOM_TARGETING.get (key).toString ());
                }
            }

            return bundle;
        }

        // modifies the color prop -- removes # and changes constants into hex values
        private String convertColorProp(String color)
        {
            color = color.replace("#", "");

            // these are arbitrary and should probably be eliminated
            if (color.equals("white"))
            {
                color = "FFFFFF";
            }
            if (color.equals("black"))
            {
                color = "000000";
            }

            return color;
        }
    }



}
